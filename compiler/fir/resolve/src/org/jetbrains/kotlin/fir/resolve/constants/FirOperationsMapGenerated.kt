/*
 * Copyright 2010-2018 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:Suppress("DEPRECATION_ERROR")

package org.jetbrains.kotlin.fir.resolve.constants

import javaslang.Function1
import org.jetbrains.kotlin.resolve.constants.evaluate.*

/** This file is generated by org.jetbrains.kotlin.fir.resolve.constants.GenerateFirOperationsMap.generateMap(). DO NOT MODIFY MANUALLY */

val unaryFunctions = mapOf<CompileTimeFunction, Function1<Any?, Any>>(
    unaryOperation(BOOLEAN, "not") { a -> a.not() },
    unaryOperation(BOOLEAN, "toString") { a -> a.toString() },
    unaryOperation(BYTE, "toByte") { a -> a.toByte() },
    unaryOperation(BYTE, "toChar") { a -> a.toChar() },
    unaryOperation(BYTE, "toDouble") { a -> a.toDouble() },
    unaryOperation(BYTE, "toFloat") { a -> a.toFloat() },
    unaryOperation(BYTE, "toInt") { a -> a.toInt() },
    unaryOperation(BYTE, "toLong") { a -> a.toLong() },
    unaryOperation(BYTE, "toShort") { a -> a.toShort() },
    unaryOperation(BYTE, "toString") { a -> a.toString() },
    unaryOperation(BYTE, "unaryMinus") { a -> a.unaryMinus() },
    unaryOperation(BYTE, "unaryPlus") { a -> a.unaryPlus() },
    unaryOperation(DOUBLE, "toByte") { a -> a.toByte() },
    unaryOperation(DOUBLE, "toChar") { a -> a.toChar() },
    unaryOperation(DOUBLE, "toDouble") { a -> a.toDouble() },
    unaryOperation(DOUBLE, "toFloat") { a -> a.toFloat() },
    unaryOperation(DOUBLE, "toInt") { a -> a.toInt() },
    unaryOperation(DOUBLE, "toLong") { a -> a.toLong() },
    unaryOperation(DOUBLE, "toShort") { a -> a.toShort() },
    unaryOperation(DOUBLE, "toString") { a -> a.toString() },
    unaryOperation(DOUBLE, "unaryMinus") { a -> a.unaryMinus() },
    unaryOperation(DOUBLE, "unaryPlus") { a -> a.unaryPlus() },
    unaryOperation(FLOAT, "toByte") { a -> a.toByte() },
    unaryOperation(FLOAT, "toChar") { a -> a.toChar() },
    unaryOperation(FLOAT, "toDouble") { a -> a.toDouble() },
    unaryOperation(FLOAT, "toFloat") { a -> a.toFloat() },
    unaryOperation(FLOAT, "toInt") { a -> a.toInt() },
    unaryOperation(FLOAT, "toLong") { a -> a.toLong() },
    unaryOperation(FLOAT, "toShort") { a -> a.toShort() },
    unaryOperation(FLOAT, "toString") { a -> a.toString() },
    unaryOperation(FLOAT, "unaryMinus") { a -> a.unaryMinus() },
    unaryOperation(FLOAT, "unaryPlus") { a -> a.unaryPlus() },
    unaryOperation(INT, "inv") { a -> a.inv() },
    unaryOperation(INT, "toByte") { a -> a.toByte() },
    unaryOperation(INT, "toChar") { a -> a.toChar() },
    unaryOperation(INT, "toDouble") { a -> a.toDouble() },
    unaryOperation(INT, "toFloat") { a -> a.toFloat() },
    unaryOperation(INT, "toInt") { a -> a.toInt() },
    unaryOperation(INT, "toLong") { a -> a.toLong() },
    unaryOperation(INT, "toShort") { a -> a.toShort() },
    unaryOperation(INT, "toString") { a -> a.toString() },
    unaryOperation(INT, "unaryMinus") { a -> a.unaryMinus() },
    unaryOperation(INT, "unaryPlus") { a -> a.unaryPlus() },
    unaryOperation(LONG, "inv") { a -> a.inv() },
    unaryOperation(LONG, "toByte") { a -> a.toByte() },
    unaryOperation(LONG, "toChar") { a -> a.toChar() },
    unaryOperation(LONG, "toDouble") { a -> a.toDouble() },
    unaryOperation(LONG, "toFloat") { a -> a.toFloat() },
    unaryOperation(LONG, "toInt") { a -> a.toInt() },
    unaryOperation(LONG, "toLong") { a -> a.toLong() },
    unaryOperation(LONG, "toShort") { a -> a.toShort() },
    unaryOperation(LONG, "toString") { a -> a.toString() },
    unaryOperation(LONG, "unaryMinus") { a -> a.unaryMinus() },
    unaryOperation(LONG, "unaryPlus") { a -> a.unaryPlus() },
    unaryOperation(SHORT, "toByte") { a -> a.toByte() },
    unaryOperation(SHORT, "toChar") { a -> a.toChar() },
    unaryOperation(SHORT, "toDouble") { a -> a.toDouble() },
    unaryOperation(SHORT, "toFloat") { a -> a.toFloat() },
    unaryOperation(SHORT, "toInt") { a -> a.toInt() },
    unaryOperation(SHORT, "toLong") { a -> a.toLong() },
    unaryOperation(SHORT, "toShort") { a -> a.toShort() },
    unaryOperation(SHORT, "toString") { a -> a.toString() },
    unaryOperation(SHORT, "unaryMinus") { a -> a.unaryMinus() },
    unaryOperation(SHORT, "unaryPlus") { a -> a.unaryPlus() },
    unaryOperation(STRING, "length") { a -> a.length },
    unaryOperation(STRING, "toString") { a -> a.toString() }
)

val binaryFunctions = mapOf<CompileTimeFunction, Function2<Any?, Any?, Any>>(
    binaryOperation(BOOLEAN, BOOLEAN, "and") { a, b -> a.and(b) },
    binaryOperation(BOOLEAN, BOOLEAN, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BOOLEAN, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(BOOLEAN, BOOLEAN, "or") { a, b -> a.or(b) },
    binaryOperation(BOOLEAN, BOOLEAN, "xor") { a, b -> a.xor(b) },
    binaryOperation(BYTE, BYTE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BYTE, DOUBLE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BYTE, FLOAT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BYTE, INT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BYTE, LONG, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BYTE, SHORT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(BYTE, BYTE, "div") { a, b -> a.div(b) },
    binaryOperation(BYTE, DOUBLE, "div") { a, b -> a.div(b) },
    binaryOperation(BYTE, FLOAT, "div") { a, b -> a.div(b) },
    binaryOperation(BYTE, INT, "div") { a, b -> a.div(b) },
    binaryOperation(BYTE, LONG, "div") { a, b -> a.div(b) },
    binaryOperation(BYTE, SHORT, "div") { a, b -> a.div(b) },
    binaryOperation(BYTE, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(BYTE, BYTE, "minus") { a, b -> a.minus(b) },
    binaryOperation(BYTE, DOUBLE, "minus") { a, b -> a.minus(b) },
    binaryOperation(BYTE, FLOAT, "minus") { a, b -> a.minus(b) },
    binaryOperation(BYTE, INT, "minus") { a, b -> a.minus(b) },
    binaryOperation(BYTE, LONG, "minus") { a, b -> a.minus(b) },
    binaryOperation(BYTE, SHORT, "minus") { a, b -> a.minus(b) },
    binaryOperation(BYTE, BYTE, "mod") { a, b -> a.mod(b) },
    binaryOperation(BYTE, DOUBLE, "mod") { a, b -> a.mod(b) },
    binaryOperation(BYTE, FLOAT, "mod") { a, b -> a.mod(b) },
    binaryOperation(BYTE, INT, "mod") { a, b -> a.mod(b) },
    binaryOperation(BYTE, LONG, "mod") { a, b -> a.mod(b) },
    binaryOperation(BYTE, SHORT, "mod") { a, b -> a.mod(b) },
    binaryOperation(BYTE, BYTE, "plus") { a, b -> a.plus(b) },
    binaryOperation(BYTE, DOUBLE, "plus") { a, b -> a.plus(b) },
    binaryOperation(BYTE, FLOAT, "plus") { a, b -> a.plus(b) },
    binaryOperation(BYTE, INT, "plus") { a, b -> a.plus(b) },
    binaryOperation(BYTE, LONG, "plus") { a, b -> a.plus(b) },
    binaryOperation(BYTE, SHORT, "plus") { a, b -> a.plus(b) },
    binaryOperation(BYTE, BYTE, "rem") { a, b -> a.rem(b) },
    binaryOperation(BYTE, DOUBLE, "rem") { a, b -> a.rem(b) },
    binaryOperation(BYTE, FLOAT, "rem") { a, b -> a.rem(b) },
    binaryOperation(BYTE, INT, "rem") { a, b -> a.rem(b) },
    binaryOperation(BYTE, LONG, "rem") { a, b -> a.rem(b) },
    binaryOperation(BYTE, SHORT, "rem") { a, b -> a.rem(b) },
    binaryOperation(BYTE, BYTE, "times") { a, b -> a.times(b) },
    binaryOperation(BYTE, DOUBLE, "times") { a, b -> a.times(b) },
    binaryOperation(BYTE, FLOAT, "times") { a, b -> a.times(b) },
    binaryOperation(BYTE, INT, "times") { a, b -> a.times(b) },
    binaryOperation(BYTE, LONG, "times") { a, b -> a.times(b) },
    binaryOperation(BYTE, SHORT, "times") { a, b -> a.times(b) },
    binaryOperation(DOUBLE, BYTE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(DOUBLE, DOUBLE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(DOUBLE, FLOAT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(DOUBLE, INT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(DOUBLE, LONG, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(DOUBLE, SHORT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(DOUBLE, BYTE, "div") { a, b -> a.div(b) },
    binaryOperation(DOUBLE, DOUBLE, "div") { a, b -> a.div(b) },
    binaryOperation(DOUBLE, FLOAT, "div") { a, b -> a.div(b) },
    binaryOperation(DOUBLE, INT, "div") { a, b -> a.div(b) },
    binaryOperation(DOUBLE, LONG, "div") { a, b -> a.div(b) },
    binaryOperation(DOUBLE, SHORT, "div") { a, b -> a.div(b) },
    binaryOperation(DOUBLE, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(DOUBLE, BYTE, "minus") { a, b -> a.minus(b) },
    binaryOperation(DOUBLE, DOUBLE, "minus") { a, b -> a.minus(b) },
    binaryOperation(DOUBLE, FLOAT, "minus") { a, b -> a.minus(b) },
    binaryOperation(DOUBLE, INT, "minus") { a, b -> a.minus(b) },
    binaryOperation(DOUBLE, LONG, "minus") { a, b -> a.minus(b) },
    binaryOperation(DOUBLE, SHORT, "minus") { a, b -> a.minus(b) },
    binaryOperation(DOUBLE, BYTE, "mod") { a, b -> a.mod(b) },
    binaryOperation(DOUBLE, DOUBLE, "mod") { a, b -> a.mod(b) },
    binaryOperation(DOUBLE, FLOAT, "mod") { a, b -> a.mod(b) },
    binaryOperation(DOUBLE, INT, "mod") { a, b -> a.mod(b) },
    binaryOperation(DOUBLE, LONG, "mod") { a, b -> a.mod(b) },
    binaryOperation(DOUBLE, SHORT, "mod") { a, b -> a.mod(b) },
    binaryOperation(DOUBLE, BYTE, "plus") { a, b -> a.plus(b) },
    binaryOperation(DOUBLE, DOUBLE, "plus") { a, b -> a.plus(b) },
    binaryOperation(DOUBLE, FLOAT, "plus") { a, b -> a.plus(b) },
    binaryOperation(DOUBLE, INT, "plus") { a, b -> a.plus(b) },
    binaryOperation(DOUBLE, LONG, "plus") { a, b -> a.plus(b) },
    binaryOperation(DOUBLE, SHORT, "plus") { a, b -> a.plus(b) },
    binaryOperation(DOUBLE, BYTE, "rem") { a, b -> a.rem(b) },
    binaryOperation(DOUBLE, DOUBLE, "rem") { a, b -> a.rem(b) },
    binaryOperation(DOUBLE, FLOAT, "rem") { a, b -> a.rem(b) },
    binaryOperation(DOUBLE, INT, "rem") { a, b -> a.rem(b) },
    binaryOperation(DOUBLE, LONG, "rem") { a, b -> a.rem(b) },
    binaryOperation(DOUBLE, SHORT, "rem") { a, b -> a.rem(b) },
    binaryOperation(DOUBLE, BYTE, "times") { a, b -> a.times(b) },
    binaryOperation(DOUBLE, DOUBLE, "times") { a, b -> a.times(b) },
    binaryOperation(DOUBLE, FLOAT, "times") { a, b -> a.times(b) },
    binaryOperation(DOUBLE, INT, "times") { a, b -> a.times(b) },
    binaryOperation(DOUBLE, LONG, "times") { a, b -> a.times(b) },
    binaryOperation(DOUBLE, SHORT, "times") { a, b -> a.times(b) },
    binaryOperation(FLOAT, BYTE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(FLOAT, DOUBLE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(FLOAT, FLOAT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(FLOAT, INT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(FLOAT, LONG, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(FLOAT, SHORT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(FLOAT, BYTE, "div") { a, b -> a.div(b) },
    binaryOperation(FLOAT, DOUBLE, "div") { a, b -> a.div(b) },
    binaryOperation(FLOAT, FLOAT, "div") { a, b -> a.div(b) },
    binaryOperation(FLOAT, INT, "div") { a, b -> a.div(b) },
    binaryOperation(FLOAT, LONG, "div") { a, b -> a.div(b) },
    binaryOperation(FLOAT, SHORT, "div") { a, b -> a.div(b) },
    binaryOperation(FLOAT, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(FLOAT, BYTE, "minus") { a, b -> a.minus(b) },
    binaryOperation(FLOAT, DOUBLE, "minus") { a, b -> a.minus(b) },
    binaryOperation(FLOAT, FLOAT, "minus") { a, b -> a.minus(b) },
    binaryOperation(FLOAT, INT, "minus") { a, b -> a.minus(b) },
    binaryOperation(FLOAT, LONG, "minus") { a, b -> a.minus(b) },
    binaryOperation(FLOAT, SHORT, "minus") { a, b -> a.minus(b) },
    binaryOperation(FLOAT, BYTE, "mod") { a, b -> a.mod(b) },
    binaryOperation(FLOAT, DOUBLE, "mod") { a, b -> a.mod(b) },
    binaryOperation(FLOAT, FLOAT, "mod") { a, b -> a.mod(b) },
    binaryOperation(FLOAT, INT, "mod") { a, b -> a.mod(b) },
    binaryOperation(FLOAT, LONG, "mod") { a, b -> a.mod(b) },
    binaryOperation(FLOAT, SHORT, "mod") { a, b -> a.mod(b) },
    binaryOperation(FLOAT, BYTE, "plus") { a, b -> a.plus(b) },
    binaryOperation(FLOAT, DOUBLE, "plus") { a, b -> a.plus(b) },
    binaryOperation(FLOAT, FLOAT, "plus") { a, b -> a.plus(b) },
    binaryOperation(FLOAT, INT, "plus") { a, b -> a.plus(b) },
    binaryOperation(FLOAT, LONG, "plus") { a, b -> a.plus(b) },
    binaryOperation(FLOAT, SHORT, "plus") { a, b -> a.plus(b) },
    binaryOperation(FLOAT, BYTE, "rem") { a, b -> a.rem(b) },
    binaryOperation(FLOAT, DOUBLE, "rem") { a, b -> a.rem(b) },
    binaryOperation(FLOAT, FLOAT, "rem") { a, b -> a.rem(b) },
    binaryOperation(FLOAT, INT, "rem") { a, b -> a.rem(b) },
    binaryOperation(FLOAT, LONG, "rem") { a, b -> a.rem(b) },
    binaryOperation(FLOAT, SHORT, "rem") { a, b -> a.rem(b) },
    binaryOperation(FLOAT, BYTE, "times") { a, b -> a.times(b) },
    binaryOperation(FLOAT, DOUBLE, "times") { a, b -> a.times(b) },
    binaryOperation(FLOAT, FLOAT, "times") { a, b -> a.times(b) },
    binaryOperation(FLOAT, INT, "times") { a, b -> a.times(b) },
    binaryOperation(FLOAT, LONG, "times") { a, b -> a.times(b) },
    binaryOperation(FLOAT, SHORT, "times") { a, b -> a.times(b) },
    binaryOperation(INT, INT, "and") { a, b -> a.and(b) },
    binaryOperation(INT, BYTE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(INT, DOUBLE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(INT, FLOAT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(INT, INT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(INT, LONG, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(INT, SHORT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(INT, BYTE, "div") { a, b -> a.div(b) },
    binaryOperation(INT, DOUBLE, "div") { a, b -> a.div(b) },
    binaryOperation(INT, FLOAT, "div") { a, b -> a.div(b) },
    binaryOperation(INT, INT, "div") { a, b -> a.div(b) },
    binaryOperation(INT, LONG, "div") { a, b -> a.div(b) },
    binaryOperation(INT, SHORT, "div") { a, b -> a.div(b) },
    binaryOperation(INT, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(INT, BYTE, "minus") { a, b -> a.minus(b) },
    binaryOperation(INT, DOUBLE, "minus") { a, b -> a.minus(b) },
    binaryOperation(INT, FLOAT, "minus") { a, b -> a.minus(b) },
    binaryOperation(INT, INT, "minus") { a, b -> a.minus(b) },
    binaryOperation(INT, LONG, "minus") { a, b -> a.minus(b) },
    binaryOperation(INT, SHORT, "minus") { a, b -> a.minus(b) },
    binaryOperation(INT, BYTE, "mod") { a, b -> a.mod(b) },
    binaryOperation(INT, DOUBLE, "mod") { a, b -> a.mod(b) },
    binaryOperation(INT, FLOAT, "mod") { a, b -> a.mod(b) },
    binaryOperation(INT, INT, "mod") { a, b -> a.mod(b) },
    binaryOperation(INT, LONG, "mod") { a, b -> a.mod(b) },
    binaryOperation(INT, SHORT, "mod") { a, b -> a.mod(b) },
    binaryOperation(INT, INT, "or") { a, b -> a.or(b) },
    binaryOperation(INT, BYTE, "plus") { a, b -> a.plus(b) },
    binaryOperation(INT, DOUBLE, "plus") { a, b -> a.plus(b) },
    binaryOperation(INT, FLOAT, "plus") { a, b -> a.plus(b) },
    binaryOperation(INT, INT, "plus") { a, b -> a.plus(b) },
    binaryOperation(INT, LONG, "plus") { a, b -> a.plus(b) },
    binaryOperation(INT, SHORT, "plus") { a, b -> a.plus(b) },
    binaryOperation(INT, BYTE, "rem") { a, b -> a.rem(b) },
    binaryOperation(INT, DOUBLE, "rem") { a, b -> a.rem(b) },
    binaryOperation(INT, FLOAT, "rem") { a, b -> a.rem(b) },
    binaryOperation(INT, INT, "rem") { a, b -> a.rem(b) },
    binaryOperation(INT, LONG, "rem") { a, b -> a.rem(b) },
    binaryOperation(INT, SHORT, "rem") { a, b -> a.rem(b) },
    binaryOperation(INT, INT, "shl") { a, b -> a.shl(b) },
    binaryOperation(INT, INT, "shr") { a, b -> a.shr(b) },
    binaryOperation(INT, BYTE, "times") { a, b -> a.times(b) },
    binaryOperation(INT, DOUBLE, "times") { a, b -> a.times(b) },
    binaryOperation(INT, FLOAT, "times") { a, b -> a.times(b) },
    binaryOperation(INT, INT, "times") { a, b -> a.times(b) },
    binaryOperation(INT, LONG, "times") { a, b -> a.times(b) },
    binaryOperation(INT, SHORT, "times") { a, b -> a.times(b) },
    binaryOperation(INT, INT, "ushr") { a, b -> a.ushr(b) },
    binaryOperation(INT, INT, "xor") { a, b -> a.xor(b) },
    binaryOperation(LONG, LONG, "and") { a, b -> a.and(b) },
    binaryOperation(LONG, BYTE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(LONG, DOUBLE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(LONG, FLOAT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(LONG, INT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(LONG, LONG, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(LONG, SHORT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(LONG, BYTE, "div") { a, b -> a.div(b) },
    binaryOperation(LONG, DOUBLE, "div") { a, b -> a.div(b) },
    binaryOperation(LONG, FLOAT, "div") { a, b -> a.div(b) },
    binaryOperation(LONG, INT, "div") { a, b -> a.div(b) },
    binaryOperation(LONG, LONG, "div") { a, b -> a.div(b) },
    binaryOperation(LONG, SHORT, "div") { a, b -> a.div(b) },
    binaryOperation(LONG, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(LONG, BYTE, "minus") { a, b -> a.minus(b) },
    binaryOperation(LONG, DOUBLE, "minus") { a, b -> a.minus(b) },
    binaryOperation(LONG, FLOAT, "minus") { a, b -> a.minus(b) },
    binaryOperation(LONG, INT, "minus") { a, b -> a.minus(b) },
    binaryOperation(LONG, LONG, "minus") { a, b -> a.minus(b) },
    binaryOperation(LONG, SHORT, "minus") { a, b -> a.minus(b) },
    binaryOperation(LONG, BYTE, "mod") { a, b -> a.mod(b) },
    binaryOperation(LONG, DOUBLE, "mod") { a, b -> a.mod(b) },
    binaryOperation(LONG, FLOAT, "mod") { a, b -> a.mod(b) },
    binaryOperation(LONG, INT, "mod") { a, b -> a.mod(b) },
    binaryOperation(LONG, LONG, "mod") { a, b -> a.mod(b) },
    binaryOperation(LONG, SHORT, "mod") { a, b -> a.mod(b) },
    binaryOperation(LONG, LONG, "or") { a, b -> a.or(b) },
    binaryOperation(LONG, BYTE, "plus") { a, b -> a.plus(b) },
    binaryOperation(LONG, DOUBLE, "plus") { a, b -> a.plus(b) },
    binaryOperation(LONG, FLOAT, "plus") { a, b -> a.plus(b) },
    binaryOperation(LONG, INT, "plus") { a, b -> a.plus(b) },
    binaryOperation(LONG, LONG, "plus") { a, b -> a.plus(b) },
    binaryOperation(LONG, SHORT, "plus") { a, b -> a.plus(b) },
    binaryOperation(LONG, BYTE, "rem") { a, b -> a.rem(b) },
    binaryOperation(LONG, DOUBLE, "rem") { a, b -> a.rem(b) },
    binaryOperation(LONG, FLOAT, "rem") { a, b -> a.rem(b) },
    binaryOperation(LONG, INT, "rem") { a, b -> a.rem(b) },
    binaryOperation(LONG, LONG, "rem") { a, b -> a.rem(b) },
    binaryOperation(LONG, SHORT, "rem") { a, b -> a.rem(b) },
    binaryOperation(LONG, INT, "shl") { a, b -> a.shl(b) },
    binaryOperation(LONG, INT, "shr") { a, b -> a.shr(b) },
    binaryOperation(LONG, BYTE, "times") { a, b -> a.times(b) },
    binaryOperation(LONG, DOUBLE, "times") { a, b -> a.times(b) },
    binaryOperation(LONG, FLOAT, "times") { a, b -> a.times(b) },
    binaryOperation(LONG, INT, "times") { a, b -> a.times(b) },
    binaryOperation(LONG, LONG, "times") { a, b -> a.times(b) },
    binaryOperation(LONG, SHORT, "times") { a, b -> a.times(b) },
    binaryOperation(LONG, INT, "ushr") { a, b -> a.ushr(b) },
    binaryOperation(LONG, LONG, "xor") { a, b -> a.xor(b) },
    binaryOperation(SHORT, BYTE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(SHORT, DOUBLE, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(SHORT, FLOAT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(SHORT, INT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(SHORT, LONG, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(SHORT, SHORT, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(SHORT, BYTE, "div") { a, b -> a.div(b) },
    binaryOperation(SHORT, DOUBLE, "div") { a, b -> a.div(b) },
    binaryOperation(SHORT, FLOAT, "div") { a, b -> a.div(b) },
    binaryOperation(SHORT, INT, "div") { a, b -> a.div(b) },
    binaryOperation(SHORT, LONG, "div") { a, b -> a.div(b) },
    binaryOperation(SHORT, SHORT, "div") { a, b -> a.div(b) },
    binaryOperation(SHORT, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(SHORT, BYTE, "minus") { a, b -> a.minus(b) },
    binaryOperation(SHORT, DOUBLE, "minus") { a, b -> a.minus(b) },
    binaryOperation(SHORT, FLOAT, "minus") { a, b -> a.minus(b) },
    binaryOperation(SHORT, INT, "minus") { a, b -> a.minus(b) },
    binaryOperation(SHORT, LONG, "minus") { a, b -> a.minus(b) },
    binaryOperation(SHORT, SHORT, "minus") { a, b -> a.minus(b) },
    binaryOperation(SHORT, BYTE, "mod") { a, b -> a.mod(b) },
    binaryOperation(SHORT, DOUBLE, "mod") { a, b -> a.mod(b) },
    binaryOperation(SHORT, FLOAT, "mod") { a, b -> a.mod(b) },
    binaryOperation(SHORT, INT, "mod") { a, b -> a.mod(b) },
    binaryOperation(SHORT, LONG, "mod") { a, b -> a.mod(b) },
    binaryOperation(SHORT, SHORT, "mod") { a, b -> a.mod(b) },
    binaryOperation(SHORT, BYTE, "plus") { a, b -> a.plus(b) },
    binaryOperation(SHORT, DOUBLE, "plus") { a, b -> a.plus(b) },
    binaryOperation(SHORT, FLOAT, "plus") { a, b -> a.plus(b) },
    binaryOperation(SHORT, INT, "plus") { a, b -> a.plus(b) },
    binaryOperation(SHORT, LONG, "plus") { a, b -> a.plus(b) },
    binaryOperation(SHORT, SHORT, "plus") { a, b -> a.plus(b) },
    binaryOperation(SHORT, BYTE, "rem") { a, b -> a.rem(b) },
    binaryOperation(SHORT, DOUBLE, "rem") { a, b -> a.rem(b) },
    binaryOperation(SHORT, FLOAT, "rem") { a, b -> a.rem(b) },
    binaryOperation(SHORT, INT, "rem") { a, b -> a.rem(b) },
    binaryOperation(SHORT, LONG, "rem") { a, b -> a.rem(b) },
    binaryOperation(SHORT, SHORT, "rem") { a, b -> a.rem(b) },
    binaryOperation(SHORT, BYTE, "times") { a, b -> a.times(b) },
    binaryOperation(SHORT, DOUBLE, "times") { a, b -> a.times(b) },
    binaryOperation(SHORT, FLOAT, "times") { a, b -> a.times(b) },
    binaryOperation(SHORT, INT, "times") { a, b -> a.times(b) },
    binaryOperation(SHORT, LONG, "times") { a, b -> a.times(b) },
    binaryOperation(SHORT, SHORT, "times") { a, b -> a.times(b) },
    binaryOperation(STRING, STRING, "compareTo") { a, b -> a.compareTo(b) },
    binaryOperation(STRING, ANY, "equals") { a, b -> a.equals(b) },
    binaryOperation(STRING, INT, "get") { a, b -> a.get(b) },
    binaryOperation(STRING, ANY, "plus") { a, b -> a.plus(b) }
)
